#!/usr/bin/env node

/**
 * This script is responsible for automatically copying the static assets
 * from the local *node_modules* into *src/js/vendor* and *src/css/vendor*.
 */

const configs = [
  {
    assetPath: "@hpcc-js/wasm/dist/index.js",
    rename: "hpccWasm.min.js"
  },
  {
    assetPath: "bootstrap/dist/js/bootstrap.bundle.min.js",
    rename: null
  },
  {
    assetPath: "bootstrap/dist/css/bootstrap.min.css",
    rename: null
  },
  {
    assetPath: "d3/dist/d3.min.js",
    rename: null
  },
  {
    assetPath: "d3-graphviz/build/d3-graphviz.min.js",
    rename: null
  },
  {
    assetPath: "feather-icons/dist/feather.min.js",
    rename: null
  },
  {
    assetPath: "save-svg-as-png/lib/saveSvgAsPng.js",
    rename: null
  }
];

const fs = require("fs");
const path = require("path");

const JS_VENDOR_DIR = "www/src/js/vendor";
const CSS_VENDOR_DIR = "www/src/css/vendor";

const prepareDir = (dir) => {
  const dirPath = path.join(process.cwd(), dir);
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath);
  } else {
    // delete all files in the directory
    fs.readdirSync(dirPath).forEach((file) => {
      fs.unlinkSync(path.join(dirPath, file));
    });
  }
};

// Prepare the vendor directories
[JS_VENDOR_DIR, CSS_VENDOR_DIR].forEach(prepareDir);

const relativePath = (p) => {
  return path.relative(process.cwd(), p);
};

const copyFile = (src, dest) => {
  fs.copyFileSync(src, dest);
  console.log(`Copied \`${relativePath(src)}\` to \`${relativePath(dest)}\``);
};

const copyAsset = (assetPath, rename) => {
  const assetPathParts = assetPath.split("/");
  const assetName = assetPathParts[assetPathParts.length - 1];
  const assetDir = assetPathParts.slice(0, assetPathParts.length - 1).join("/");
  const assetDirPath = path.join(".", "node_modules", assetDir);
  const assetPathInNodeModules = path.resolve(path.join(assetDirPath, assetName));
  const assetPathInVendorDir = path.resolve(path.join(
    assetPath.endsWith(".js") ? JS_VENDOR_DIR : CSS_VENDOR_DIR,
    rename || assetName
  ));
  copyFile(assetPathInNodeModules, assetPathInVendorDir);
};

configs.forEach(({ assetPath, rename }) => {
  copyAsset(assetPath, rename);
});
